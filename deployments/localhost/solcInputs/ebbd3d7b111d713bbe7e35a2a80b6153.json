{
  "language": "Solidity",
  "sources": {
    "contracts/Dappazon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ncontract Dappazon {\n    /**EVENTS */\n    event List(string indexed name, uint256 cost, uint256 quantity);\n    event Buy(address indexed buyer, uint256 indexed orderId, uint256 itemId);\n    string public name;\n    address private immutable owner;\n    struct Item {\n        uint256 id;\n        string name;\n        string category;\n        string image;\n        uint256 cost;\n        uint256 rating;\n        uint256 stock;\n    }\n    struct Order {\n        uint256 time;\n        Item item;\n    }\n    mapping(uint256 => Item) public items;\n    mapping(address => uint256) public orderCount;\n    mapping(address => mapping(uint256 => Order)) public orders;\n\n    constructor() {\n        name = \"Dappazon\";\n        owner = msg.sender;\n    }\n\n    modifier isOwner() {\n        require(msg.sender == owner, \"You are not the owner\");\n        _;\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    // List products\n    function list(\n        uint256 _id,\n        string memory _name,\n        string memory _category,\n        string memory _image,\n        uint256 _cost,\n        uint256 _rating,\n        uint256 _stock\n    ) public isOwner {\n        Item memory item = Item(\n            _id,\n            _name,\n            _category,\n            _image,\n            _cost,\n            _rating,\n            _stock\n        );\n        items[_id] = item;\n        emit List(_name, _cost, _stock);\n    }\n\n    //buy products\n    function buy(uint256 _id) public payable {\n        //receive crypto\n        require(\n            msg.value >= items[_id].cost,\n            \"You need to spend more ETH to buy\"\n        );\n        require(items[_id].stock > 0, \"Item out of stock\");\n        //create an order\n        Order memory order = Order(block.timestamp, items[_id]);\n        // Save order to chain\n        orderCount[msg.sender]++;\n        orders[msg.sender][orderCount[msg.sender]] = order;\n        //substract stock\n        items[_id].stock = items[_id].stock - 1;\n        // Emit event\n        emit Buy(msg.sender, orderCount[msg.sender], _id);\n    }\n\n    // withdraw funds\n    function withdraw() public payable isOwner() {\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}